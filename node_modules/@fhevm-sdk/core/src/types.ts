import type { Signer, Provider, InterfaceAbi } from 'ethers';
import type { FhevmInstance } from '@zama-fhe/relayer-sdk/node';

export type NetworkPreset = 'localhost' | 'sepolia' | 'mainnet' | 'custom';

export interface FHEVMConfig {
  network: NetworkPreset;
  aclAddress?: string;
  kmsVerifierAddress?: string;
  inputVerifierAddress?: string;
  verifyingContractAddress?: string;
  gatewayUrl?: string;
  gatewayChainId?: number;
  provider?: Provider | undefined;
}

export interface FHEVMContext {
  config: Omit<Required<FHEVMConfig>, 'provider'> & { provider?: Provider };
  initialized: boolean;
  fhevmInstance: FhevmInstance;
}

export interface EncryptionSchema {
  [key: string]: 'uint8' | 'uint16' | 'uint32' | 'uint64' | 'address' | 'bytes';
}

export interface EncryptedInput<T extends EncryptionSchema = EncryptionSchema> {
  data: string;
  proof: string;
  meta: {
    contract: string;
    user: string;
    schema: T;
  };
}

export interface EncryptInputParams<T extends EncryptionSchema = EncryptionSchema> {
  contract: string;
  schema: T;
  values: Record<keyof T, unknown>;
  user: string;
}

export interface ExecuteEncryptedParams {
  signer: Signer;
  contract: string;
  abi: InterfaceAbi;
  functionName: string;
  encrypted: EncryptedInput;
  overrides?: Record<string, unknown>;
}

export interface WaitForDecryptionParams {
  provider: Provider;
  contract: string;
  event: string;
  filter?: Record<string, unknown>;
  timeoutMs?: number;
}

export interface UserDecryptParams {
  signer: Signer;
  ciphertext: string;
  domain?: string;
}

export interface PublicDecryptParams {
  ciphertext: string;
}

export interface NetworkPresets {
  aclAddress: string;
  kmsVerifierAddress: string;
  inputVerifierAddress: string;
  verifyingContractAddress: string;
  gatewayUrl: string;
  gatewayChainId: number;
}
