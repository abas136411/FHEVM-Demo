import { Provider, Signer, InterfaceAbi } from 'ethers';
import { FhevmInstance } from '@zama-fhe/relayer-sdk/node';

type NetworkPreset = 'localhost' | 'sepolia' | 'mainnet' | 'custom';
interface FHEVMConfig {
    network: NetworkPreset;
    aclAddress?: string;
    kmsVerifierAddress?: string;
    inputVerifierAddress?: string;
    verifyingContractAddress?: string;
    gatewayUrl?: string;
    gatewayChainId?: number;
    provider?: Provider | undefined;
}
interface FHEVMContext {
    config: Omit<Required<FHEVMConfig>, 'provider'> & {
        provider?: Provider;
    };
    initialized: boolean;
    fhevmInstance: FhevmInstance;
}
interface EncryptionSchema {
    [key: string]: 'uint8' | 'uint16' | 'uint32' | 'uint64' | 'address' | 'bytes';
}
interface EncryptedInput<T extends EncryptionSchema = EncryptionSchema> {
    data: string;
    proof: string;
    meta: {
        contract: string;
        user: string;
        schema: T;
    };
}
interface EncryptInputParams<T extends EncryptionSchema = EncryptionSchema> {
    contract: string;
    schema: T;
    values: Record<keyof T, unknown>;
    user: string;
}
interface ExecuteEncryptedParams {
    signer: Signer;
    contract: string;
    abi: InterfaceAbi;
    functionName: string;
    encrypted: EncryptedInput;
    overrides?: Record<string, unknown>;
}
interface WaitForDecryptionParams {
    provider: Provider;
    contract: string;
    event: string;
    filter?: Record<string, unknown>;
    timeoutMs?: number;
}
interface UserDecryptParams {
    signer: Signer;
    ciphertext: string;
    domain?: string;
}
interface PublicDecryptParams {
    ciphertext: string;
}
interface NetworkPresets {
    aclAddress: string;
    kmsVerifierAddress: string;
    inputVerifierAddress: string;
    verifyingContractAddress: string;
    gatewayUrl: string;
    gatewayChainId: number;
}

/**
 * Initialize the FHEVM SDK with configuration
 * Loads TFHE/WASM via Zama SDK and stores context
 */
declare function initFHEVM(config: FHEVMConfig): Promise<void>;
/**
 * Get the current FHEVM context
 * @throws {SDKError} if SDK is not initialized
 */
declare function getFHEVM(): FHEVMContext;
/**
 * Encrypt input values according to schema using REAL Zama SDK
 */
declare function encryptInput(params: EncryptInputParams): Promise<EncryptedInput>;
/**
 * Execute encrypted transaction
 * Uses ethers v6 to send tx with encrypted input
 */
declare function executeEncrypted(params: ExecuteEncryptedParams): Promise<{
    hash: string;
    receipt: unknown;
}>;
/**
 * Wait for decryption event
 */
declare function waitForDecryption(params: WaitForDecryptionParams): Promise<unknown>;
/**
 * User decrypt with EIP-712 signature
 */
declare function userDecrypt(params: UserDecryptParams): Promise<string>;
/**
 * Public decrypt via relayer
 */
declare function publicDecrypt(params: PublicDecryptParams): Promise<string>;
/**
 * Reset context (mainly for testing)
 */
declare function resetFHEVM(): void;

declare enum SDKErrorCode {
    NOT_INITIALIZED = "NOT_INITIALIZED",
    ALREADY_INITIALIZED = "ALREADY_INITIALIZED",
    INVALID_CONFIG = "INVALID_CONFIG",
    ENCRYPTION_FAILED = "ENCRYPTION_FAILED",
    DECRYPTION_FAILED = "DECRYPTION_FAILED",
    TRANSACTION_FAILED = "TRANSACTION_FAILED",
    TIMEOUT = "TIMEOUT",
    NETWORK_ERROR = "NETWORK_ERROR",
    INVALID_SCHEMA = "INVALID_SCHEMA",
    MISSING_SIGNER = "MISSING_SIGNER"
}
declare class SDKError extends Error {
    readonly code: SDKErrorCode;
    readonly cause?: unknown;
    constructor(code: SDKErrorCode, message: string, cause?: unknown);
    static notInitialized(): SDKError;
    static alreadyInitialized(): SDKError;
    static invalidConfig(details: string): SDKError;
    static encryptionFailed(cause?: unknown): SDKError;
    static decryptionFailed(cause?: unknown): SDKError;
    static transactionFailed(cause?: unknown): SDKError;
    static timeout(operation: string, timeoutMs: number): SDKError;
    static invalidSchema(details: string): SDKError;
    static missingSigner(): SDKError;
}

declare const NETWORK_PRESETS: Record<NetworkPreset, NetworkPresets | null>;
declare function resolveNetworkPresets(network: NetworkPreset): NetworkPresets;

export { type EncryptInputParams, type EncryptedInput, type EncryptionSchema, type ExecuteEncryptedParams, type FHEVMConfig, type FHEVMContext, NETWORK_PRESETS, type NetworkPreset, type NetworkPresets, type PublicDecryptParams, SDKError, SDKErrorCode, type UserDecryptParams, type WaitForDecryptionParams, encryptInput, executeEncrypted, getFHEVM, initFHEVM, publicDecrypt, resetFHEVM, resolveNetworkPresets, userDecrypt, waitForDecryption };
