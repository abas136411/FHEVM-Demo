export enum SDKErrorCode {
  NOT_INITIALIZED = 'NOT_INITIALIZED',
  ALREADY_INITIALIZED = 'ALREADY_INITIALIZED',
  INVALID_CONFIG = 'INVALID_CONFIG',
  ENCRYPTION_FAILED = 'ENCRYPTION_FAILED',
  DECRYPTION_FAILED = 'DECRYPTION_FAILED',
  TRANSACTION_FAILED = 'TRANSACTION_FAILED',
  TIMEOUT = 'TIMEOUT',
  NETWORK_ERROR = 'NETWORK_ERROR',
  INVALID_SCHEMA = 'INVALID_SCHEMA',
  MISSING_SIGNER = 'MISSING_SIGNER',
}

export class SDKError extends Error {
  public readonly code: SDKErrorCode;
  public override readonly cause?: unknown;

  constructor(
    code: SDKErrorCode,
    message: string,
    cause?: unknown
  ) {
    super(message);
    this.code = code;
    this.cause = cause;
    this.name = 'SDKError';
    Object.setPrototypeOf(this, SDKError.prototype);
  }

  static notInitialized(): SDKError {
    return new SDKError(
      SDKErrorCode.NOT_INITIALIZED,
      'FHEVM SDK not initialized. Call initFHEVM() first.'
    );
  }

  static alreadyInitialized(): SDKError {
    return new SDKError(
      SDKErrorCode.ALREADY_INITIALIZED,
      'FHEVM SDK already initialized.'
    );
  }

  static invalidConfig(details: string): SDKError {
    return new SDKError(SDKErrorCode.INVALID_CONFIG, `Invalid configuration: ${details}`);
  }

  static encryptionFailed(cause?: unknown): SDKError {
    return new SDKError(SDKErrorCode.ENCRYPTION_FAILED, 'Failed to encrypt input', cause);
  }

  static decryptionFailed(cause?: unknown): SDKError {
    return new SDKError(SDKErrorCode.DECRYPTION_FAILED, 'Failed to decrypt data', cause);
  }

  static transactionFailed(cause?: unknown): SDKError {
    return new SDKError(SDKErrorCode.TRANSACTION_FAILED, 'Transaction execution failed', cause);
  }

  static timeout(operation: string, timeoutMs: number): SDKError {
    return new SDKError(
      SDKErrorCode.TIMEOUT,
      `Operation '${operation}' timed out after ${timeoutMs}ms`
    );
  }

  static invalidSchema(details: string): SDKError {
    return new SDKError(SDKErrorCode.INVALID_SCHEMA, `Invalid schema: ${details}`);
  }

  static missingSigner(): SDKError {
    return new SDKError(SDKErrorCode.MISSING_SIGNER, 'Signer is required for this operation');
  }
}
